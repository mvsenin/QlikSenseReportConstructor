/*******************************************************************************
Qlik Sense Report Constructior
/*******************************************************************************

Version: 0.6
Author: mvsenin
Created: 2022-02-28
Modified: 2022-09-05
Description:
The automation tool allows generating the JSON content of the Qlik and VizLib
plain tables with the configured set of the dimensions and measures which can be
shown/hidden by filters with the %FieldGroup, %DimensionLabel, and %MeasureLabel
fields.
The more dimensions & measures your table retains, the harder its support is, so
it's really makes sense to automate the process a little bit. :-)

/*******************************************************************************
Instructions
/*******************************************************************************

0. Start from "Qlik Sense Report Constructor.xlsm" file:
	- On the "Config" tab:
		- Select "Chart type" value - either Qlik or VizLib
		- Select "Suppress zeto" value - defines zero values suppression
		- Set "Report Name" value - report name is used for uniquness
		  of the field names in case of multiple report constructors in
		  the app
	- Fill the content of the Dimensions, Measures, and FieldGroups tabs
		- use the fields for creation of the dimensions, measures, and
		  field gorups
		- For dimensions:
			%DimensionName - exact field name in the data model
			%DimensionLabel - column title in the table
			%FieldGroup - field group name, its selection allows showing a group
			              of the corresponding fields
			%AlwaysVisible - 1 or true = field is always visibile, otherwise its
			                 visibility depends on the use selection otherwise
			%NullSuppression - 1 or true = null values are suppressed, otherwise
			                   null values are shown
			Sorting	- is the optional column, it can be used for ordering
			          the values
		- For measures:
			%MeasureName - measure name, not necessarily exact field name
			               in the data model, but it MUST be unique among all
						   the measures
			%MeasureLabel - column title in the table
			%MeasureExpression - measure expression
			%FieldGroup - field group name, its selection allows showing a group
			              of the corresponding fields
			%AlwaysVisible - 1 or true = field is always visibile, otherwise its
			                 visibility depends on the use selection otherwise
			Sorting	- is the optional column, it can be used for ordering
			          the values
			MeasureExpressionCore - is the optional column, it can be used as
						a proxy expression to build the value of
						the %MeasureExpression column
			MeasureFormat - is the optional column, it can be used as a proxy
							for specifying the measure format to build the value
							of the %MeasureExpression column with the formating
							functions, e.g. Num()

		- For field groups:
			%FieldGroup - field group name
			Sorting	- is the optional column, it can be used for ordering
			          the values

	- Once ready, run the ProcessReportConstructorData procedure (via Alt+F11 or
	  other way)

Notes:
	1) you can build plain table(s) in the destination app with two dimensions:
	   $Table, $Field, and download the list of the field names for that. Please
	   see the sample on the #DEV sheet of the "tst.constructor.qvf" app
	2) It's recommended to clone the "Qlik Sense Report Constructor" folder for
	   each project/app/report individually
	3) Order of the fields in the tables only depends on the order in
	   the Excel-file

1. Adopt the "Report Constructor" Qlik script from the "tst.constructor.qvf"
   app (its sample is also provided below) to your app content:
	- dimension table(s) (_Dimensions*):
		%DimensionName*, %DimensionLabel*
	- measure table(s) (_Measures*):
		%MeasureName*, %MeasureLabel*, %MeasureExpression*
	- field groups table(s) (_FieldGroups*):
		%FieldGroup*

* In case of multiple report constructors in your app:
	1) It's necessary to give each and every entity, including tables and files,
       unique names by adding the corresponding report name to the entity name
	   via the underscore (_) char, e.g. _Dimensions_Sales table with
	   %DimensionName_Sales and %DimensionLabel_Sales fileds, and etc.
	2) As mentioned under the Note for the Step #0, it's recommended to clone
       the "Qlik Sense Report Constructor" folder for report individually

Notes:
	1) You can load the date from the Excel-file(s) you prepared on the Step #0

2. Copy the generated JSON content with the table properties to the buffer
   (Ctrl+A + Ctrl+C) for the following Qlik Sense objects from the following
   files created in the same folder with the Excel-file:
	- VizLib plain table - "VizLib Plain Table.json"
	- Qlik Sense plain table - "Qlik Plain Table Properties.json" file

3. Open your destination app and add "/options/developer" to the very end of
   its URL:
	- Add Qlik Sense objects as per your need:
		- filter with %DimensionLabel* field
		- filter with %MeasureLabel* field
		- filter with %FieldGroup* field (is not supported for VizLib yet)
		- VizLib plain table
		- Qlik Sense plain table
	For VizLib plain table:
		- call context menu Developer > Properties
		- paste copied properties to the corresponding text box
		- press Close
	For Qlik Sense plain table"
		- call context menu Developer > Properties
		- paste copied properties to the corresponding text box
		- press Close

* Please see the comment for the Step #1 regarding multiple report constructors

4. Now your table should show dimensions and measures according to selections
   made in the filters added on the Step #3

Notes:
	1) Properties generation logic should be checked against other object types
	   and might need to be changed

/*******************************************************************************
Sample "Report Constructor" Qlik script
/******************************************************************************/

// To hide report contructor fields from selections
Set HidePrefix = '%';

/*
	CreateReportConstructorData() generates data and script variables for report
    constructors.
    
	Parameters:
    - @sCreateReportConstructorData_ReportName - report name
	
    Usage sample for the Sales report:
	
	Call CreateReportConstructorData('Sales');
*/
Sub CreateReportConstructorData(sCreateReportConstructorData_ReportName)
    // Variables with parameters in order to get field names and titles/labels
    // To get a filed name and label from any table by sequential numbers
    // of table ($1) and field ($2)
    Let sCreateReportConstructorData_ReportName =
    	if(Len(sCreateReportConstructorData_ReportName) > 0
        	, '_' & sCreateReportConstructorData_ReportName, ''
            );
    
    Set vFieldName$(sCreateReportConstructorData_ReportName) =
    	'[' & Only({<$Table={$1}, $FieldNo={$2}>} $Field) & ']';
    Set vFieldLabel$(sCreateReportConstructorData_ReportName) =
    	Replace(Only({<$Table={$1}, $FieldNo={$2}>} $Field), '$1.', '');

    // To get dimension names and labels by sequential dimension number
    Set vDimName$(sCreateReportConstructorData_ReportName) =
    	'[' & FieldValue('%DimensionName$(sCreateReportConstructorData_ReportName)', $1) & ']';
    Set vDimLabel$(sCreateReportConstructorData_ReportName) =
    	FieldValue('%DimensionLabel$(sCreateReportConstructorData_ReportName)', $1);

    // To get measure names, labels, and expressions by sequential measure number
    Set vMeaName$(sCreateReportConstructorData_ReportName) =
    	'[' & FieldValue('%MeasureName$(sCreateReportConstructorData_ReportName)', $1) & ']';
    Set vMeaLabel$(sCreateReportConstructorData_ReportName) =
    	FieldValue('%MeasureLabel$(sCreateReportConstructorData_ReportName)', $1);
    Set vMeaExpr$(sCreateReportConstructorData_ReportName) =
    	FieldValue('%MeasureExpression$(sCreateReportConstructorData_ReportName)', $1);

    /*
    Dimension list columns description:
        - %DimensionName - shall contain presice field names that are
        				   supposed to be dimensions
        - %DimensionLabel - shall contain dimension names that are used
        				   in column titles and filter list
    */
    _Dimensions$(sCreateReportConstructorData_ReportName):
    LOAD
        %DimensionName
        	as %DimensionName$(sCreateReportConstructorData_ReportName),
        Dual(%DimensionLabel, RowNo())
        	as %DimensionLabel$(sCreateReportConstructorData_ReportName)
    ;
    Load * Inline [
    %DimensionName, %DimensionLabel
    DealID, Deal ID
    Name, Deal Name
    DealTeam, Deal Team
    DealType, Deal Type
    Status, Satus
    Due, Due Date
    Region, Region
    ];

    /*
    Measure list columns description:
        - %MeasureName - shall contain presice field names that are supposed
        				 to be measure identifiers, not necessarily presice
                         field names
        - %MeasureLabel - shall contain measure names that are used in column
        				  titles and filter list
        - %MeasureExpression - shall contain measure expressions/formulas
    */
    _Measures$(sCreateReportConstructorData_ReportName):
    Load
        %MeasureName
        	as %MeasureName$(sCreateReportConstructorData_ReportName)
        , Dual(%MeasureLabel, RowNo())
        	as %MeasureLabel$(sCreateReportConstructorData_ReportName)
        , %MeasureExpression
        	as %MeasureExpression$(sCreateReportConstructorData_ReportName)
    ;
    Load * Inline [
    %MeasureName, %MeasureLabel, %MeasureExpression
    DealSubtype, # subtypes, Count(DealSubtype)
    DistinctDealSubtype, # unique subtypes, Count(Distinct DealSubtype)
    ]
    ;

    /*
    Field group column description:
        - %FieldGroup - shall contain filed group names, which dimensions and measure
        				are linked to on the Config tab of the Excel file
    */
    _FieldGroups$(sCreateReportConstructorData_ReportName):
    Load Distinct
        %FieldGroup as %FieldGroup$(sCreateReportConstructorData_ReportName)
    ;
    Load * Inline [
    %FieldGroup
    Deal
    Organization
    ]
    ;
    
    sCreateReportConstructorData_ReportName=;
EndSub

Call CreateReportConstructorData('Sales');